
*如果在对一个变量进行长度遍历时使用：for(int i,int len=s.length();i<len;i++) 而不是for(int i;i<s.length();i++)，因为后者每次循环都会去调用length方法，这个方法的时间复杂度是o（n）,会极大影响性能



##ArrayList：数组列表
arraylist的同步是通过list=Collections.synchronizedList(list)实现的
1:jdk1.7以上 arrayList的扩容方式从1.5倍+1变成1.5倍（c=c+c>>1）,右移一位就是除以2，余数舍弃
2：arrayList底层是使用数组进行存储的，比如grow扩容也是直接使用Arrays.copyOf()直接复制到新数组
3:arrayList可以直接转成数组，使用toArray（），底层也是直接使用Arrays.copyOf进行复制
4:add(index,E)是把index后面的元素（包含index）全部向后移一位，位移使用的是System.arraycopy（），再把元素填上该位置。
5：remove（index）是把index（不包含）后面的元素全部向前移一位，并把最后一个元素置null
6：数组的实现好处就是随机访问速度很快，因为在内存中他们都是连续的，但是中途插入或者删除的效率都很低，因为arraylist会复制整个数组进行位置调整
7:equals（）是object的一个方法，所以null是没有equals这个方法的，他只是一个关键字
8：A.retainAll（B），返回AB的交集
9：获取子集的方法，如果直接使用subList，会导致父子列表关联起来，父列表变化，子列表也会变化，一般创建一个新列表解决这问题：List<E> list=new List<>(l.subList())
10:使用Iterator进行遍历，在遍历的开始，索引指针指着第一个元素的左边，iterator只能从左向右遍历，不能往回遍历，listIterator就可以，还可以修改列表的值：
	hasNext：显示指针右边还有没有索引
	next：右移指针，并输出当前元素
	previous：先输出当前元素，再左移指针，如果指针已经位于最左边，再调用抛异常
	hasPrevious：显示指针左边还有没有索引
11：sort（Comparator c）使用外部比较器进行比较规则的制定
implement Comparator并实现Compare方式，左参数大于右参数并返回-1时，升序排列即从小到大，相反就降序
*12：collections.sort与Arrays.sort区别
    Collections.sort本质上使用的是Arrays.sort，转出对象数组后使用Arrays.list进行排序,排序后使用listIterator把元素复制回数组。
    Arrays.sort排序会先进性判断，如果LegacyMergeSort.userRequested为true则使用legacyMergeSort（传统归并排序），否则使用ComparableTimSort，这个参数可以通过System.setProperty("java.util.Arrays.useLegacyMergeSort", "true")来设置
如果使用的是legacyMergeSort。当数组大小小于7时使用插入排序，否则使用归并排序，ComparableTimSort，实际上是用的也是归并排序

Vector，也是一个数组实现的列表，但是是同步synchronized的，加上同步实现的不好，所以已经舍弃了
基本操作跟arraylist相近


Collections.synchronizedList(List)可以返回一个线程安全的ist，同样的,可以使用类似的方法获得线程安全的map set
Collections.synchronizedMap(map)
Collections.synchronizedSet(set)

Iterator与ListIterator之间的区别
Iterator只能从头到尾进行遍历，而listIterator可以从尾到头进行遍历，并且可以直接设置列表的元素，或者添加
